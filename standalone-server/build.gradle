buildscript {
  Properties constants = new Properties()
  file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

  ext {

    //corda_gradle_plugins_version = '4.0.45'

    corda_release_group = constants.getProperty("cordaReleaseGroup")
    corda_core_release_group = constants.getProperty("cordaCoreReleaseGroup")
    corda_release_version = constants.getProperty("cordaVersion")
    corda_core_release_version = constants.getProperty("cordaCoreVersion")
    corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
    kotlin_version = constants.getProperty("kotlinVersion")
    junit_version = constants.getProperty("junitVersion")
    quasar_version = constants.getProperty("quasarVersion")
    log4j_version = constants.getProperty("log4jVersion")
    slf4j_version = constants.getProperty("slf4jVersion")
    corda_platform_version = constants.getProperty("platformVersion").toInteger()
    //springboot
    spring_boot_version = '2.0.2.RELEASE'
    spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
  }

  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
    classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
    classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    classpath "org.springframework" +
      ".boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"

  }
}

allprojects {
  apply from: "${rootProject.projectDir}/repositories.gradle"
  apply plugin: 'kotlin'

  repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://software.r3.com/artifactory/corda' }
    maven { url 'https://jitpack.io' }
  }

  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
      languageVersion = "1.2"
      apiVersion = "1.2"
      jvmTarget = "1.8"
      javaParameters = true // Useful for reflection.
    }
  }

  jar {
    // This makes the JAR's SHA-256 hash repeatable.
    preserveFileTimestamps = false
    reproducibleFileOrder = true
  }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
  main {
    resources {
      srcDir rootProject.file("config/dev")
    }
  }
}

configurations {
  braid
}

dependencies {
  // Corda dependencies.
  cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
  cordaRuntime "$corda_release_group:corda-node-api:$corda_release_version"
  cordaRuntime "$corda_release_group:corda:$corda_release_version"

  // CorDapp dependencies.
  cordapp project(":workflows")
  cordapp project(":contracts")

  cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
  cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
  cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"
  braid 'io.bluebank.braid:braid-server:4.1.2-RC13'
}

cordapp {
  info {
    name "CorDapp Template"
    vendor "Corda Open Source"
    targetPlatformVersion corda_platform_version
    minimumPlatformVersion corda_platform_version
  }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
  nodeDefaults {
    projectCordapp {
      deploy = false
    }
    cordapp project(':contracts')
    cordapp project(':workflows')
  }
  node {
    name "O=Notary,L=London,C=GB"
    notary = [validating: false]
    p2pPort 10002
    rpcSettings {
      address("localhost:10003")
      adminAddress("localhost:10043")
    }
  }
  node {
    name "O=PartyA,L=London,C=GB"
    p2pPort 10005
    rpcSettings {
      address("localhost:10006")
      adminAddress("localhost:10046")
    }
    rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
  }
  node {
    name "O=PartyB,L=New York,C=US"
    p2pPort 10008
    rpcSettings {
      address("localhost:10009")
      adminAddress("localhost:10049")
    }
    rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
  }

}

task installQuasar(type: Copy) {
  destinationDir rootProject.file("lib")
  from(configurations.quasar) {
    rename 'quasar-core(.*).jar', 'quasar.jar'
  }
}

/*
 * The following is required for now, while Braid Server OpenAPI server is not
 * integrated with the gradle corda plugin
 */

task startBraidPartyA {
  doLast {
    startBraid("PartyA", "localhost:10006", 9006)
  }
}

task startBraidPartyB {
  doLast {
    startBraid("PartyB", "localhost:10009", 9009)
  }
}

def startBraid(partyName, rpcHostAndPort, port) {
  println("starting braid for $partyName with rpc $rpcHostAndPort and port $port ")
  def partyDirectory = "build/nodes/${partyName}"
  def cordappDirectory = "${partyDirectory}/cordapps"
  // the following two effectively forces authentication via the REST API by passing
  // empty strings for user and password. replace this with "user1" and "test" to
  // automatically auth with node. N.B. configuring a username and password for RPC
  // disables the security at the REST API and is NOT secure!
  def rpcuser = "\"\""
  // empty string
  def rpcpassword = "\"\""
  // empty string
  def braidPath = braidServerPath()
  javaexec {
    systemProperty "file.encoding", "UTF-8"
    // need this for braid to work with Windows at present
    main = "-jar"
    args = [
      braidPath,
      rpcHostAndPort,
      rpcuser,
      rpcpassword,
      port,
      3, // openapi v3 only supported
      cordappDirectory
    ]
  }
}

def braidServerPath() {
  // we just use the location of the braid-server dependency
  return configurations.braid.first()
}

